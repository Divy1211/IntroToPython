{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Programming With Python","text":""},{"location":"#1-what-is-a-program","title":"1. What is a program?","text":"<p>When you open a chrome window, or play a game, or click a button on your computer, how does the computer know what to do? Who tells the computer when you click the google chrome icon \"hey, open up chrome!\"? Everytime you perform an action on your computer, a set of instructions associated with that action are followed by the computer. Every single thing, ranging from pressing a key on your keyboard to playing a game, watching a video, has a set of instructions associated with it that the computer follows. A computer is a dumb machine, and it must be told exactly what to do! A program is the way to do exactly this. It is a set of instructions that the computer follows to perform a certain task</p>"},{"location":"#2-how-do-we-write-a-program","title":"2. How do we Write a Program?","text":"<p>Remember, a computer is a dumb machine. We can't just simply say to a computer in english \"whats 3+6\". A Computer does not understand instructions written in english. Instead, we actually need to communicate with it in a language that the computer understands. A programming language is thus used to write instructions which a computer can understand. There are many programming languages that you can write instructions in, like Java, C++, JavaScript, Python. We will be learning about python today!</p>"},{"location":"#3-requirements","title":"3. Requirements","text":"<ol> <li> <p>Python:     To use python, you must install it first. Find the download here</p> </li> <li> <p>A text editor/IDE of choice:     To write python code, we need a text editor or an IDE. PyCharm Community Edition is free and highly recommended!</p> </li> </ol>"},{"location":"arguments/","title":"Different types of arguments","text":"<p>In python, there are 6 different types of arguments that a function can take. They are:</p>"},{"location":"arguments/#1-required-arguments","title":"1. Required Arguments","text":"<p>These are arguments that MUST ALWAYS be passed to the function.</p> <pre><code>def add(a, b):\n    # a and b are required arguments\n    return a+b\n\nprint(add(3, 5))\n# prints 8\n</code></pre>"},{"location":"arguments/#2-optional-arguments","title":"2. Optional Arguments","text":"<p>These are arguments that may not be passed to the function.</p> <pre><code>def add(a, b, c = 0):\n    # a and b are required arguments while c is an optional argument. All arguments initialised with a default value are optional\n    return a+b+c\n\nprint(add(3, 5))\n# prints 8\n\nprint(add(3, 5, 5))\n# prints 13\n</code></pre> <p>Order, Order</p> <p>All optional arguments are always written after the positional arguments in the function prototype. This is not a valid function: <pre><code>def add(c = 0, a, b): ...\n</code></pre></p>"},{"location":"arguments/#3-positional-arguments","title":"3. Positional Arguments","text":"<p>These are arguments that are passed using their position to the function.</p> <pre><code>def simple_interest(principle, rate, time):\n    # principle, rate and time are all required arguments\n    return principle*rate/100*time\n\n# since they are passed to the function by their position, i.e. principle is 1000, rate is 15 and time is 5 \nprint(simple_interest(1000, 15, 5))\n# prints 750.0\n</code></pre> <p>Optional Positional Arguments</p> <p>In the example in point 2, the variable <code>c</code> is a positional argument that is optional!</p>"},{"location":"arguments/#4-keyword-arguments","title":"4. Keyword Arguments","text":"<p>These are arguments that are passed using their name to the function.</p> <pre><code>def simple_interest(rate, time, principle = 100):\n    # rate and time are all required arguments while principle is an optional argument with a default value of 100\n    return principle*rate/100*time\n\n# since they are passed to the function \nprint(simple_interest(rate = 15, principle = 1000, time = 5))\n# prints 750.0\n\nprint(simple_interest(15, 5))\n# prints 75.0\n\nprint(simple_interest(15, principle = 1000, time = 5))\n# prints 750.0\n</code></pre> <p>Order, Order</p> <p>Keyword arguments are always passed to the function after positional arguments!</p> <p>Thus, <code>simple_interest(15, time = 5, 1000)</code> isn't allowed, but <code>simple_interest(15, 5, principle = 1000)</code> is</p> <p>Duplicate Arguments</p> <p>An argument cannot be called as both a positional and a keyword argument IN THE SAME function call! <code>simple_interest(15, 5, rate = 15)</code> would not be valid since it calls rate as both a positional and a keyword argument</p>"},{"location":"arguments/#5-arbitrary-argumentsargs","title":"5. Arbitrary Arguments(*args)","text":"<p>When an unknown or \"arbitrary\" number of arguments are passed to a function, they are known as Arbitrary Arguments</p> <pre><code>def add_multiply(*nums, multiply = 1):\n    # nums is a required argument. the * denotes that it will accept an arbitrary number of arguments.\n    # nums will be a tuple of all the arguments provided\n    sum_ = 0\n    for num in nums:\n        sum_+=num\n    return sum_*multiply\n\n# add up all these numbers\nprint(add_multiply(5, 6, 2, 4, 2))\n# prints 19\n\n# add up all these numbers and also multiply by 2\nprint(add_multiply(5, 6, 2, 4, 2, 3, 5, multiply = 2))\n# prints 54\n</code></pre> <p>Order, Order</p> <p>Other arguments may follow an arbitrary argument but then that argument MUST ALWAYS be called as a keyword argument</p> <p>Other positional arguments may precede an arbitrary argument</p> <p>Arbitrary Argument is Always Positional</p> <p>An arbitrary argument CANNOT be called as a keyword argument!</p> <p>Arbitrary Argument is Always Unique</p> <p>There can be only one arbitrary keyword argument in a function</p>"},{"location":"arguments/#6-arbitrary-keyword-argumentskwargs","title":"6. Arbitrary Keyword Arguments(**kwargs)","text":"<p>When an unknown or \"arbitrary\" number of keyword arguments are passed to a function, they are known as Arbitrary Keyword Arguments</p> <pre><code>def display_works(author, **works):\n    # works is a required argument. the ** denotes that it will accept an arbitrary number of keyword arguments.\n    # works will be a dictionary of all the keyword arguments and their values provided.\n    for key in works:\n        print(f\"({key}, {works[key]})\")\n    print(author)\n\ndisplay_works(\"Roald Dahl\", book1=\"Charlie and the Chocolate Factory\", book2=\"Matilda\")\n</code></pre> <p>Order, Order</p> <p>No arguments can follow arbitrary keyword arguments.</p> <p>Any number of keyword or positional arguments can precede arbitrary keyword arguments.</p> <p>Arbitrary Argument is Always Unique</p> <p>There can be only one arbitrary keyword argument in a function</p> <pre><code>def add_multiply(*nums, multiply = 1):\n    # nums is a required argument. the * denotes that it will accept an arbitrary number of arguments.\n    # nums will be a list of all the arguments provided\n    sum_ = 0\n    for num in nums:\n        sum_+=num\n    return sum_*multiply\n\n# add up all these numbers\nprint(add_multiply(5, 6, 2, 4, 2))\n# prints 19\n\n# add up all these numbers and also multiply by 2\nprint(add_multiply(5, 6, 2, 4, 2, 3, 5, multiply = 2))\n# prints 54\n</code></pre>"},{"location":"arguments/#7-positional-only-arguments","title":"7. Positional only arguments","text":"<p>Normal arguments of a function can be called either positionally or by name. If you wish to make an argument only callable by its position, you can do so</p> <pre><code>def simple_interest(principle, /, rate, time):\n    # any arguments preceding a / are ALL position only arguments\n    # principle is now a position only argument\n    return principle*rate/100*time\n\n# the first argument is always the principle\nprint(simple_interest(1000, 15, 5)) # rate = 15 and time = 5\n# prints 75.0\n\n# this is a syntax error: \nsimple_interest(rate = 15, principle = 1000, time = 5)\n\n# rate and time can still be called by name\nprint(simple_interest(1000, time = 5, rate = 15))\n# prints 75.0\n</code></pre>"},{"location":"arguments/#8-keyword-only-arguments","title":"8. Keyword only arguments","text":"<p>If you wish to make an argument only callable by its name, you can also do so</p> <pre><code>def simple_interest(principle, /, rate, *, time):\n    # any arguments after a * are ALL keyword only arguments\n    return principle*rate/100*time\n\nprint(simple_interest(1000, 15, time = 5))\n# prints 75.0\n\n# this is a syntax error: \nprint(simple_interest(1000, 15, 5)) # time cannot be called as a positional argument\n\n# rate can be called anyhow:\nprint(simple_interest(1000, time = 5, rate = 15))\n# prints 75.0\n</code></pre> <p>Note</p> <p>These can be mixed with optional parameters <pre><code>def some_interest(principle = 1000, /, rate = 15, *, time, multiplier = 2): ...\n\n# valid calls:\nsome_interest(time = 10)\nsome_interest(rate = 10, time = 2)\nsome_interest(10_000, 20, time = 10) # principle = 10k, rate = 20\nsome_interest(time = 10, multiplier = 1)\n</code></pre></p>"},{"location":"classes_objects/","title":"Classes and Objects","text":""},{"location":"classes_objects/#1-what-is-object-oriented-programming-and-why-do-we-need-it","title":"1. What is Object Oriented Programming, and why do we need it?","text":"<p>We come across a lot of different objects in our daily life. Each object has its own properties, some features that define it.</p> <p>Lets take a pen for example. What are the properties of a pen? Its colour, its size, its kind (ball-point, fountain-point, gel-ink) and maybe the name of its owner.</p> <p>Another example is a textbook. A textbook has a size, it has a subject, it has a length (the number of pages) and it has some information inside of it. Now the information inside a textbook is organised into named chapters.</p> <p>For example, a maths text book might contain chapters like \"sets\", \"trigonometery\", \"calculus\" and so on, and if you want someone to read or go through a chapter, you'd say something like \"go through the chapter on calculus\".</p> <p>Now imagine that you are a programmer who wants to write code that describes a pen, or a textbook... how could you go about writing code that expresses these properties discussed above?</p> <p>You might try writing code that looks similar to this:</p> <p><pre><code>pen_colour = \"red\"\npen_size = 0.5\npen_kind = \"ball\"\npen_owner = \"John\"\n\n# wouldn't you want a way to see the info about your pen? Lets write a function to do that!\ndef display_information(colour, size, kind, owner):\n    print(\"Colour :\", colour)\n    print(\"Size   :\", size)\n    print(\"Kind   :\", kind)\n    print(\"Owner  :\", owner)\n    print()\n\ndisplay_information(pen_colour, pen_size, pen_kind, pen_owner)\n</code></pre> Sure, that would work for one pen, but some questions one might have are:</p> <ol> <li>What if you wanted to make an unknown number of pens? How would someone know how many variables to declare?</li> <li>What if you had a more complicated object with 100 properties? Would it be feasable to manually declare 100 variables for every object that you might need to create?</li> </ol> <p>This is where classes come into the picture. So far we have learnt about the primitive data types in python, primitive meaning that they are in-built, simple data types which python provides to us. Now we are moving on to custom data types, data types that are defined by you, the programmer!</p>"},{"location":"classes_objects/#2-what-are-classes-and-why-do-we-need-them","title":"2. What are classes, and why do we need them?","text":"<p>So now, we want to create our own data types, a data type that would allow us to describe a pen, or any other object effectively, using code. This is exactly what a class allows us to do!</p> <p>A class is basically a blue-print for creating an object, it tells us the defining properties of the object, and it also tells us what functions the object can perform. Following the class blue-print allows us to create \"instances\" of that class.</p> <p>An object of a class, the realisation of the blueprint, is known as an instance of the class.</p> <pre><code>class Pen:\n\n    # remember the properties of the pen we discussed? A colour, a size, a kind, an owner\n\n    def __init__(pen, col, sz, knd, own):\n        pen.colour = col\n        pen.size = sz\n        pen.kind = knd\n        pen.owner = own\n\n    # This special function __init__ is known as a constructor, this is the \"method\" by which the object will be \"constructed\",\n    # this is the essence of the blue-print!\n\n\n    # wouldn't you want a way to see the properties of a pen you made as well?\n    # you can write functions in a class that can work with the instances of the class. These functions are known as 'member\n    # functions' of the class or 'methods'.\n\n    # methods are always functions that work on objects of a specific class. A method cannot be used without an object\n\n    # All methods of a class are unique to that class, and cannot be used on objects from other classes!\n    # for example, you could have a method called read() that reads the contents of a text book but you\n    # cannot use that method on a pen, because it doesn't make sense to read a pen!\n    def display_information(pen):\n        print(\"Colour :\", pen.colour)\n        print(\"Size   :\", pen.size)\n        print(\"Kind   :\", pen.kind)\n        print(\"Owner  :\", pen.owner)\n        print()\n\n# But a class is just a blue-print for creating a pen, it tells us which properties a pen is supposed to have\n# But it is NOT the pen itself!\n# To actually create a pen, we need to use the blue-print and specify all the properties of the specifc pen we want to create:\n\nA = Pen(\"red\", 0.5, \"marker\", \"John\")\n# When we do this, python calls the constructor and says, hey constructor,\n# construct me a Pen with its colour as \"red\", its size as 0.5, its kind as \"marker\" and let its owner be \"John\"\n# this process of creating an object from its class is known as instantiation\n\nA.display_information()\n# display this marker's information\n\n# And now that we actually have a pen class, remember that we can make AS MANY pens as we want!\nB = Pen(\"blue\", 0.1, \"ball\", \"John\")\nC = Pen(\"black\", 0.2, \"fountain\", \"Robin\")\nD = Pen(\"red\", 0.1, \"gel\", \"Joe\")\nE = Pen(\"green\", 0.1, \"gel\", \"Robert\")\n\n# since a method works on a particular instance of a class, it must be called by using the dot operator, on that specific object.\nB.display_information()\nC.display_information()\nD.display_information()\nE.display_information()\n</code></pre>"},{"location":"classes_objects/#3-classes-conventionally","title":"3. Classes, conventionally","text":"<p>All programmers mutually agree to follow some rules, called conventions that are not necessary, but nice to follow while writing classes and make your code more readable to a usual programmer:</p> <pre><code>class Pen:\n\n    # typically, the object is called \"self\" in the functions that work with it\n    # it is also common to give the same names to the function parameters as the properties of the object itself\n    def __init__(self, colour, size, kind, owner):\n        self.colour = colour\n        self.size = size\n        self.kind = kind\n        self.owner = owner\n\n    def display_information(self):\n        print(\"Colour :\", self.colour)\n        print(\"Size   :\", self.size)\n        print(\"Kind   :\", self.kind)\n        print(\"Owner  :\", self.owner)\n        print()\n</code></pre> PractiseAnswer <p>Write a class that describes a bicycle object</p> <p>Which properties should a bicycle object have?</p> <ol> <li>Colour (red, blue, white, etc)</li> <li>Material (steel, aluminum, plastic, wood, etc)</li> <li>Size (small, medium, large)</li> <li>Height of the seat (in m)</li> <li>Gear ratio (1, 2.5, 4, etc)</li> <li>Diameter of the wheels (in cm)</li> <li>Does it have a basket</li> <li>Does it have a Bell</li> </ol> <p>What functions should a bicycle have?</p> <ol> <li>Change gear ratio</li> <li>Adjust seat height</li> </ol> <p>Write a class that describes a bicycle object</p> <p>Which properties should a bicycle object have?</p> <ol> <li>Colour (red, blue, white, etc)</li> <li>Material (steel, aluminum, plastic, wood, etc)</li> <li>Size (small, medium, large)</li> <li>Height of the seat (in m)</li> <li>Gear ratio (1, 2.5, 4, etc)</li> <li>Diameter of the wheels (in cm)</li> <li>Does it have a basket</li> <li>Does it have a Bell</li> </ol> <p>What functions should a bicycle have?</p> <ol> <li>Change gear ratio</li> <li>Adjust seat height</li> </ol> <pre><code>class Bicycle:\n    def __init__(\n        self,\n        colour,\n        mat,\n        size,\n        height,\n        gear_ratio,\n        diameter,\n        has_basket,\n        has_bell\n    ):\n        self.colour = colour\n        self.mat = mat\n        self.size = size\n        self.height = height\n        self.gear_ratio = gear_ratio\n        self.diameter = diameter\n        self.has_basket = has_basket\n        self.has_bell = has_bell\n\n    def change_gear(self, new_ratio):\n        self.gear_ratio = new_ratio\n\n    def change_height(self, new_height):\n        self.height = new_ratio\n</code></pre>"},{"location":"classes_objects/#4-what-makes-classes-so-good","title":"4. What makes classes so good?","text":"<ol> <li>Reusability: The same class can be used to make as many objects as you want</li> <li>Modularity: The code becomes incredibly modular, and it is easy for a programmer to debug the code in case there are any bugs</li> <li>Clarity of code: Due to the code being modular, it is easier for others to read and understand the code</li> <li>Better organisation: The data can be clearly and neatly organised for more complex objects</li> <li> <p>Data Abstraction: This is the process of hiding the implementation details from the user, allowing them to focus on the functionality instead.</p> <p>Example: you don't need to know a smartphone works internally to be able to use it. The details about its circuits, its workings are hidden from you, the user! Instead, the smartphone provides you with functions (call, message, surf the internet) only.</p> <p>Example in python: The functions like <code>math.sin()</code> and <code>math.cos()</code> can be used to find out the sine or cosine of an angle, but they do not tell you how the calcualtion is actually done. Those implementation details are hidden from you, the user and you only need to focus on the functionality!</p> </li> </ol>"},{"location":"classes_objects/#5-an-object-can-also-have-other-objects-as-its-properties","title":"5. An object can also have other objects as its properties","text":"<pre><code>class Pen:\n    def __init__(self, colour, size, kind, owner):\n        self.colour = colour\n        self.size = size\n        self.kind = kind\n        self.owner = owner\n    def display_information(self):\n        print(\"Colour :\", self.colour)\n        print(\"Size   :\", self.size)\n        print(\"Kind   :\", self.kind)\n        print(\"Owner  :\", self.owner)\n        print()\nclass Pencil:\n    def __init__(self, colour, shade, owner):\n        self.colour = colour\n        self.shade = shade\n        self.owner = owner\n    def display_information(self):\n        print(\"Colour :\", self.colour)\n        print(\"Shade  :\", self.shade)\n        print(\"Owner  :\", self.owner)\n        print()\n\nclass Stationary:\n    def __init__(self, pen, pencil):\n        self.pen = pen\n        self.pencil = pencil\n    def display_information(self):\n        print(\"The Pen: \")\n        self.pen.display_information()\n        print(\"The Pencil: \")\n        self.pencil.display_information()\n\nA = Stationary(\n    Pen(\"blue\", 0.1, \"ball\", \"John\"),\n    Pencil(\"black\", \"HB\", \"John\")\n)\nA.display_information()\n</code></pre>"},{"location":"flow_control/","title":"Flow Control","text":"<p>There are two types of flow control statements supported by Python:</p>"},{"location":"flow_control/#1-conditionals","title":"1. Conditionals","text":"<p>There are times in life when you need to make decisions, and these decisions depend on certain conditions. For example, suppose that you are in a class, then a decision that you might have to make would be:</p> <p>\\(\\color{red} \\text{if} \\; \\color{yellow} \\text{you have a pen,} \\; \\color{red} \\text{then} \\; \\color{white} \\text{you can write on a piece of paper,} \\; \\color{red} \\text{else} \\; \\color{white} \\text{you borrow a pen}\\)</p> <p>Similarly, when writing a program, you might need to make decisions at some points in your code. Conditionals are decision making statements that can be used to chose which set of instructions to execute depending on given conditions.</p>"},{"location":"flow_control/#11-the-if-else-if-statement","title":"1.1. The <code>if else if</code> statement","text":"<p>An <code>if else</code> statement is used whenever you need your program to make decisions. It executes one set of instructions <code>if</code> a conditon is true or <code>else</code> it executes another set of instructions.</p> <p>Syntax: <pre><code>a = 10\nb = 20\n# if(boolean expression / variable / constant)\nif b &gt; a:\n    # if the above condition is true do:\n    print(\"does one thing\")\n    print(\"b &gt; a confirmed!\")\nelse:\n    # if the above condition is not true do:\n    print(\"does another thing\")\n    print(\"b &lt;= a confirmed!\")\n</code></pre></p> <p>when writing if else statements, an indentation, usually 4 spaces, is required. Python uses these indentations to understand what part of the code is inside the if/else.</p> <p>An <code>if</code> statement does not need to be followed by an <code>else</code> statement everytime</p> <pre><code>a = 10\nb = 20\nif b &gt; a:\n    print(\"doesn't do anything if the conditon is false\")\n</code></pre> <p>What if you need to check multiple conditions and do separate things for each case? this is when you use an <code>if else if</code> statement!</p> <pre><code>a = 10\nb = 20\nif b &gt; a:\n    print(\"b &gt; 20\")\nelif b == 20: # elif is short for else if\n    print(\"b == 20\")\nelse:\n    print(\"no condition is true\")\n</code></pre> <p>What happens when multiple conditions are true?</p> <p>In the above example, both the <code>(b &gt; a)</code> and <code>(b == 20)</code> conditions are true. However, in an <code>if else if</code> statement, only one branch of instructions is ever executed. Which condition takes proiority is decided by what order you write them in. So in this case, <code>\"b &gt; 20\"</code> will be printed to the screen because that is the first condition which is true.</p> <p>Technically, whenever a condition becomes true and its branch of instructions are executed, all of the remaining conditions are skipped, and not even evaluated.</p> PractiseAnswer <p>Now that you are armed with the power of <code>if else if</code>, can you:</p> <p>Write a program that would print the maximum of 3 given variables.</p> <p>When you're ready, click the \"Answer\" to view the solution.</p> <p>Now that you are armed with the power of <code>if else if</code>, can you:</p> <p>Write a program that would print the maximum of 3 given variables.</p> <p>When you're ready, click the \"Answer\" to view the solution. <pre><code>a = 10\nb = 20\nc = 30\nif a &gt; b and a &gt; c:\n    print(\"the maximum is a:\", a)\nelse if b &gt; c and b &gt; a:\n    print(\"the maximum is b:\", b)\nelse:\n    print(\"the maximum is c:\", c)\n</code></pre></p>"},{"location":"flow_control/#2-loops","title":"2. Loops","text":"<p>There are times in life when you need to repeatedly keep doing something under certain conditions. For example, suppose that you are playing a game and you are stuck on a boss fight where you keep dying, something that you are doing might be:</p> <p>\\(\\color{red} \\text{while} \\; \\color{yellow} \\text{you have not defeated the boss,} \\; \\color{white} \\text{try again}\\)</p> <p>If you wanted to write out the times two table, you might do:</p> <p>\\(\\color{red} \\text{for} \\; \\color{yellow} \\text{every} \\; \\color{green} \\text{number} \\; \\color{red} \\text{between 1 and 10} \\; \\color{white} \\text{write }2\\times \\color{green} \\text{number}\\)</p> <p>Similarly, when writing a program, it might be needed to repeat certain parts of your code multiple times. Loops are statements that can be used to repeatedly execute a block of code given a condition is true.</p> <p>Sometimes the need arises to repeatedly execute the same statement or a statement where only a few things are changing. Loops are statements that allow us to do exactly that! There are two types of loops suported by Python:</p>"},{"location":"flow_control/#21-the-while-loop","title":"2.1. The <code>while</code> loop","text":"<p>A <code>while</code> statement repeatedly executes a block of code as long as (while) something is <code>True</code>. This process of repeatedly executing the same block of code is known as iteration! For example:</p> <pre><code>a = 0\nwhile a &lt; 10:\n    print(\"a =\", a)\n    a+=1\n</code></pre> PractiseHintAnswer <p>Now that you are armed with the power of <code>while</code>, can you:</p> <p>Write a program that would print the following pattern:</p> <p><code>1, 2, 4, 7, 11, 16... up to 15 terms?</code></p> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>When you're ready, click \"Answer\" to view the solution.</p> <p>Now that you are armed with the power of <code>while</code>, can you:</p> <p>Write a program that would print the following pattern:</p> <p><code>1, 2, 4, 7, 11, 16... up to 15 terms?</code></p> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>When you're ready, click \"Answer\" to view the solution.</p> <p>Hint: Notice that the pattern here is that each time, the increase of the terms is also going up by one. The 2nd term is the first term + 1, the 3rd term is the 2nd term + 2, and so on.</p> <p>Now that you are armed with the power of <code>while</code>, can you:</p> <p>Write a program that would print the following pattern:</p> <p><code>1, 2, 4, 7, 11, 16... up to 15 terms?</code></p> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>When you're ready, click \"Answer\" to view the solution.</p> <p>Hint: Notice that the pattern here is that each time, the increase of the terms is also going up by one. The 2nd term is the first term + 1, the 3rd term is the 2nd term + 2, and so on.</p> <pre><code>number = 1\nincrease = 1\nwhile increase &lt;= 15:\n    print(\"number =\", number)\n    number = number + increase\n    increase+=1\n</code></pre>"},{"location":"flow_control/#22-the-for-loop","title":"2.2. The <code>for</code> loop","text":"<p>A <code>for</code> statement is specifically used to loop over a range of values, say <code>5</code> to <code>23</code></p> <p>For example: <pre><code>for a in range(2, 23):\n    print(\"a =\", a)\n# prints numbers from 3 to 22\n\n# what if you wanted to go down from 10 to 0?\n# that is also possible:\nfor a in range(10, 0):\n    print(\"a =\", a)\n\n# you can also define a step size:\nfor a in range(10, 0, 3):\n    print(\"a =\", a)\n# similar to slicing\n</code></pre></p> <p>For loops can also be used to loop through all the elements of a list, tuple or a dict:</p> <p>With lists: <pre><code>ls = [5, 3, 56, 23]\n\nfor number in ls:\n    print(number)\n</code></pre></p> <p>With tuples: <pre><code>my_tuple = (17, 32, 11, 64)\n\nfor number in my_tuple:\n    print(number)\n</code></pre></p> <p>With dicts: <pre><code>my_dict = {3.14: \"pi\", \"pie\": \"is tasty!\", \"spongebob\": \"squarepants\"}\n\nfor key in my_dict:\n    print(key, my_dict[key])\n</code></pre></p>"},{"location":"flow_control/#23-the-break-statement","title":"2.3. The <code>break</code> statement","text":"<p><code>break</code> forces a loop to terminate earlier, even if its condition is still <code>True</code>:</p> <pre><code>a = 0\nwhile a &lt; 10:\n    print(\"a =\", a)\n    a+=1\n    if a == 5:\n        break\n</code></pre> <p>This will just print: <pre><code>0\n1\n2\n3\n4\n</code></pre></p> <p>Notice that the loop's condition is still <code>True</code> at the end of this program</p>"},{"location":"flow_control/#24-the-continue-statement","title":"2.4. The <code>continue</code> statement","text":"<p><code>continue</code> makes the loop immediately jump to its next cycle and skip any code after the <code>continue</code></p> <pre><code>a = 0\nwhile a &lt; 5:\n    if a == 2:\n        continue\n    print(\"a =\", a)\n    a+=1\n</code></pre> <p>This outputs:</p> <pre><code>0\n1\n3\n4\n</code></pre> <p>Notice that printing the value <code>2</code> was skipped, but the others were still printed</p>"},{"location":"flow_control/#25-the-while-else-statement","title":"2.5. The <code>while else</code> statement","text":"<p>This is a unique feature of python that is not found in other programming languages. You can add an else block at the end of a while loop as follows:</p> <pre><code>i = 0\nwhile i &lt; 3:\n    print(\"while\")\n    i += 1\nelse:\n    print(\"else\")\n</code></pre> <p>What does this mean? If the condition of the while loop evaluates to <code>False</code>, then the code in the <code>else</code> block is executed. This is just like an <code>if else</code> statement! So the above code will output:</p> <pre><code>while\nwhile\nwhile\nelse\n</code></pre> <p>But wait, doesn't that mean that an else block will ALWAYS run at the end of a loop when the loop condition eventually becomes <code>False</code> for it to terminate? Yep! Now you might be asking, how is it any different from:</p> <pre><code>i = 0\nwhile i &lt; 3:\n    print(\"while\")\n    i += 1\n\nprint(\"else\")\n</code></pre> <p>And the answer is, for this specific piece of code, there is no difference, and it should be written without the <code>else</code></p> <p>The difference is when we terminate our loop by other methods, remember the <code>break</code> statement?</p> <pre><code>a = 0\nwhile a &lt; 10:\n    print(\"a =\", a)\n    a+=1\n    if a == 5:\n        break\nelse:\n    print(\"else\")\n</code></pre> <p>This outputs:</p> <pre><code>0\n1\n2\n3\n4\n</code></pre>"},{"location":"flow_control/#26-the-for-else-statement","title":"2.6. The <code>for else</code> statement","text":"<p>This works exactly like the <code>while else</code> statement, where the <code>else</code> block is only executed when the loop terminates without a <code>break</code></p> <pre><code>for i in range(10):\n    print(i)\n    if i == 5:\n        break\nelse:\n    print(\"else\")\n</code></pre> <p>This outputs:</p> <pre><code>0\n1\n2\n3\n4\n5\n</code></pre>"},{"location":"functions/","title":"Functions","text":""},{"location":"functions/#1-what-are-functions-and-why-do-we-need-them","title":"1. What are functions and why do we need them?","text":"<p>Lets say that you are watching TV. Every time you want to change the channel, you will use the same remote control. It would be quite inconvenient if you had to make a new remote control each time you wanted to change the channel. Similarly, in programming, you might want to write a piece of code that you need to re-use multiple times in different parts of your program.</p> <p>For example, lets say that you write a program to find the largest number in a list: <pre><code>list_of_numbers = [32, 88, 3, 48, 87, 22]\nmaximum = list_of_numbers[0]\n\nfor number in list_of_numbers:\n    if maximum &lt; number:\n        maximum = number\nprint(maximum)\n</code></pre></p> <p>But what if you need to find the largest value in 10 different lists? Would it be feasable to rewrite the same code again 10 different times? This is where functions come into the picture. They allow you to re-use the same piece of code again and again, however many times you might want.</p> <p>More formally, A function is a block of code that allows you to to perform a specific action. It is modular, and re-usable as many times as you want. Some functions might even give you back a value.</p> <p>For example, the same code written using functions would look something like:</p> <pre><code># this line is known as the function prototype.\n# the variables inside the brackets are known as formal parameters or formal arguments\ndef max_value(list_of_numbers):\n\n# the word 'def' is short for define. It means you are defining a function called 'max_value'\n\n# In python, it is a convention to write function names in 'snake case'\n# snake case means that the each word is in lower case, and separated by underscores.\n# Example: this_is_snake_case\n\n    maximum = list_of_numbers[0]\n\n    for number in list_of_numbers:\n        if maximum &lt; number:\n            maximum = number\n\n    # the word 'return' here tells python that this function needs to give you back the value of 'maximum'\n    return maximum\nlist1 = [32, 88, 3, 48, 87, 22]\nlist2 = [44, 26, 56, 90, 12, 35]\nlist3 = [96, 43, 30, 12, 37, 26]\n\n\n# this is known as a function call and the variables passed to the function are called actual parameters or actual arguments\nmax1 = max_value(list1)\nmax2 = max_value(list2)\nmax3 = max_value(list3)\n\nprint(max1)\nprint(max2)\nprint(max3)\n</code></pre> <p>A function does not have to necessarily return a value:</p> <p><pre><code>def display_elements(a_list):\n    for element in a_list:\n        print(element)\n\nlist1 = [32, 88, 3, 48, 87, 22]\nlist2 = [44, 26, 56, 90, 12, 35]\nlist3 = [96, 43, 30, 12, 37, 26]\n\nprint(display_elements(list1))\nprint(display_elements(list2))\nprint(display_elements(list3))\n</code></pre> Output: <pre><code>32\n88\n3\n48\n87\n22\nNone\n44\n26\n56\n90\n12\n35\nNone\n96\n43\n30\n12\n37\n26\nNone\n</code></pre></p> <p>Why does it print a <code>None</code> between the elements of the lists? Remember, these functions don't return any values! Thus, <code>print(displayElementsOf(list1))</code> doesn't actually have something to print!</p> <p>Functions are Minimalist</p> <p>A function does not execute the rest of its code if a return statement is encountered</p> <p><pre><code>def function(number):\n    return number*2\n    print(number/2)\n\nprint(function(5))\n</code></pre> Output: <pre><code>10\n</code></pre></p> PractiseAnswer <p>Write a function to calculate the factorial of a number. Use the function to then find the factorials of all the numbers from 1 to 20</p> <p>What's a factorioal again?</p> <p>The factorial of a number n, represented by n! is given by: \\(n! = n\\cdot(n-1)\\cdot(n-2)...1\\). For example, \\(5! = 5\\cdot4\\cdot3\\cdot2\\cdot1 = 120\\) and \\(0! = 1\\).</p> <p>Write a function to calculate the factorial of a number. Use the function to then find the factorials of all the numbers from 1 to 20</p> <p>What's a factorioal again?</p> <p>The factorial of a number n, represented by n! is given by: \\(n! = n\\cdot(n-1)\\cdot(n-2)...1\\). For example, \\(5! = 5\\cdot4\\cdot3\\cdot2\\cdot1 = 120\\) and \\(0! = 1\\).</p> <pre><code>def factorial(n):\n    facto = 1\n    for i in range(2, n+1):\n        facto*=i\n    return facto\n\nfor number in range(1, 21):\n    print(\"the factorial of\", number, \"=\", factorial(number))\n</code></pre>"},{"location":"functions/#2-type-hints","title":"2. Type Hints","text":"<p>When writing functions with a lot of parameters and variable names that might be unintuitive, it is a good idea to use type hints! type hints allow the person writing the function to tell the user what the expected data types of all the arguments being passed into it are</p> <p>For example:</p> <pre><code># this tells the user than height is a float, weight\n# is an int and that this function is meant to return a float as well\ndef calculateBMI(height: float, weight: int) -&gt; float:\n    return weight/((height/100)**2)\n\nprint(calculateBMI(182, 80))\n</code></pre>"},{"location":"functions/#3-what-is-recursion-and-why-do-we-need-it","title":"3. What is recursion, and why do we need it?","text":"<p>Lets take the factorial from the previous excersie as an example.</p> <p>We have learnt that n! = n*(n-1)*(n-2)*...*1</p> <p>Similarly, (n-1)! = (n-1)*(n-2)*...*1</p> <p>But, notice that from these two equations we can actually write that n! = n*(n-1)!</p> <p>So if you were being introduced to the factorial for the first time, and you were just told that n! = n*(n-1)! would this be enough information to find out the factorial of any number? Try computing 3! just by using the definition that n! = n*(n-1)!.</p> <p>If you actually tried to do that, you would realise that its actually not possible because with that definition, you don't know when to stop!</p> <p>3! = 3*2!</p> <p>2! = 2*1!</p> <p>1! = 1*0!</p> <p>0! = 0*(-1)!</p> <p>...</p> <p>This means that other than the fact that n! = n*(n-1)! we also need a point to stop at. Lets say that you are now told that 0! = 1. With that information in mind, we can actually compute 3!</p> <p>3! = 3*2!</p> <p>2! = 2*1!</p> <p>1! = 1*0!</p> <p>and now, we know that 0! = 1, so now we use that in the last equation and work our way back up!</p> <p>1! = 1 and then using this, 2! = 2, and then using this, it is found that 3! = 6</p> <p>This process of defining a process in its own terms is known as recursion! The \"stopping point\" at which we stop going down and start to work back up is known as the base case! So can we do something like this with functions? Yes!</p> <pre><code>def factorial(number):\n\n    # remember to write a base case!\n    # If you forget, you're program will be stuck\n    # in an infinite loop of recursion!\n    if number == 0:\n        return 1\n    # the recursive case:\n    return number*factorial(number-1)\n</code></pre> PractiseHintAnswer <p>What does the following piece of code output? You are not allowed to type this into an IDE and run the code. Try to work it out by hand!</p> <pre><code>def function(number):\n    if number &gt;= 1:\n        print(number)\n        function(number-1)\n    print(number)\n\nfunction(3)\n</code></pre> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>What does the following piece of code output? You are not allowed to type this into an IDE and run the code. Try to work it out by hand!</p> <pre><code>def function(number):\n    if number &gt;= 1:\n        print(number)\n        function(number-1)\n    print(number)\n\nfunction(3)\n</code></pre> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>Hint: A function will always execute ALL of its code UNLESS a return statement is encountered. If another function call is encountered inside a function, it will first complete the code of that function before continuing with the rest of its own code.</p> <p>What does the following piece of code output? You are not allowed to type this into an IDE and run the code. Try to work it out by hand!</p> <pre><code>def function(number):\n    if number &gt;= 1:\n        print(number)\n        function(number-1)\n    print(number)\n\nfunction(3)\n</code></pre> <p>If you need help, but don't want to see the full solution immediately, click \"Hint\"</p> <p>Hint: A function will always execute ALL of its code UNLESS a return statement is encountered. If another function call is encountered inside a function, it will first complete the code of that function before continuing with the rest of its own code.</p> <p>Output:</p> <pre><code>3\n2\n1\n0\n1\n2\n3\n</code></pre>"},{"location":"functions/#4-exceptions","title":"4. Exceptions","text":"<p>Exceptions are problems that a program might run into during its execution. Take division as an example:</p> <pre><code>def divide(a, b):\n    return a/b\nc = divide(10, 0)\nprint(\"c:\", c)\n</code></pre> <p>What happens if we try to run this code?</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Divy\\My Stuff\\mkdocs\\IntroToPython\\test.py\", line 3, in &lt;module&gt;\n    c = divide(10, 0)\n        ^^^^^^^^^^^^^\n  File \"C:\\Users\\Divy\\My Stuff\\mkdocs\\IntroToPython\\test.py\", line 2, in divide\n    return a/b\n           ~^~\nZeroDivisionError: division by zero\n</code></pre> <p>Our program crashes (nothing further is executed) when the error is encountered and python yells at us for trying to divide by 0. <code>ZeroDivisionError</code> is an exception.</p>"},{"location":"functions/#41-the-raise-statement","title":"4.1. The <code>raise</code> statement","text":"<p>So, how do we make use of Exceptions ourselves? If you have a custom operation that might give an error for certain inputs, we can do that as follows:</p> <pre><code>def factorial(n):\n    # factorial is not defined for negative numbers or for anything other than ints!\n    if n &lt; 0 or type(n) is not int:\n        raise ValueError(\"Factorial can only be computed for non negative integers\")\n    facto = 1\n    for i in range(2, n+1):\n        facto*=i\n    return facto\n</code></pre>"},{"location":"functions/#42-the-try-except-else-finally-statement","title":"4.2. The <code>try except else finally</code> statement","text":"<p>Now it would be very inconvenient if every time a program ran into an exception, it just crashed without doing anything else. It is the programmer's job to ensure that errors are dealt with and that they do not make a program crash. How does one deal with errors then?</p> <p>We use the <code>try except</code> statement:</p> <pre><code>try:\n    c = divide(10, 0)\n    print(\"c:\", c)\nexcept ZeroDivisionError:\n    # runs if a ZeroDivisionError is encountered\n    print(\"Cannot divide by 0!\")\n\nprint(\"Other things still run!\")\n</code></pre> <p>Catch Me If You Can!</p> <p>In other languages, <code>except</code> is often called <code>catch</code>, and you might hear programmers referring to <code>except</code> as <code>catch</code>, they are the same thing!</p> <p>Now this does not mean that the program is safe, sometimes a single function call raises different errors for different problems, each one of them must be handled:</p> <pre><code>try:\n    c = divide(10, 0)\n    print(\"c:\", c)\nexcept ValueError as e:\n    # runs if a ValueError is encountered\n    # note: divide doesn't actually ever produce one,\n    # so this except block is redundant. This is just an example!\n    ...\nexcept ZeroDivisionError as e:\n    # runs if a ZeroDivisionError is encountered\n    print(\"Cannot divide by 0!\")\n\nprint(\"Other things still run!\")\n</code></pre> <p>Sometimes, you might want to run a piece of code regardless of any errors occurring in a try block.</p> <pre><code>try:\n    c = divide(10, 0) \nfinally:\n    # runs even if there is an error\n    print(\"finally\")\n\nprint(\"Other things DO NOT run!\")\n</code></pre> <p>This program still crashes, but it prints <code>finally</code> before doing so.</p> <p>If you might want to run a piece of code only when an error did NOT occur, that can be achieved by adding an <code>else</code>:</p> <pre><code>try:\n    c = divide(10, 0)\nexcept ZeroDivisionError:\n    # runs if a ZeroDivisionError is encountered\n    print(\"Cannot divide by 0!\")\nelse:\n    # Only runs if NO error occurred\n    # Cannot be used before an except block,\n    # finally must come AFTER else if you want to write one\n    print(\"c:\", c)\n</code></pre> <p>You might say that it is equivalent to:</p> <p><pre><code>try:\n    c = divide(10, 0)\n    print(\"c:\", c)\nexcept ZeroDivisionError:\n    # runs if a ZeroDivisionError is encountered\n    print(\"Cannot divide by 0!\")\n</code></pre> And while that is true (they are equivalent), writing it with an <code>else</code> is preferred, because we do not want to unintentionally catch exceptions produced by the rest of the code!</p> <p>Consider the following example:</p> <pre><code>try:\n    c = divide(0, 1)\n    divide(2, c) # did we intend to catch this division by zero error as well?\nexcept ZeroDivisionError:\n    # runs if a ZeroDivisionError is encountered\n    print(\"Cannot divide by 0!\")\n</code></pre> <p>If we used an <code>else</code>, our intentions would be more explicit!</p> <p>Error vs Exception</p> <p>Keen readers would've noticed that the word Exception has been used in the heading of this section, but the examples contain things python calls \"Error\"s</p> <p>What is the difference between an Error and an Exception?</p> <p>Technically, there is none. However, conventionally, an error should never be caught and handled at runtime, they should be prevented to begin with. Exceptions are the ones which are meant to be caught at runtime, but for educational purposes and keeping things simple in the examples above, an Exception to this convention has been made in this article.</p> <p>This is not a well known convention, and it is common to run into code where errors are used incorrectly on the internet.</p>"},{"location":"inheritance/","title":"Inheritance","text":""},{"location":"inheritance/#1-what-is-inheritance-and-why-do-we-need-it","title":"1. What is inheritance, and why do we need it?","text":"<p>Lets say that there is a Person. Now each person has some defining properties, like their name, age, sex, height, weight. A person could be a student and in that case, they would have some additional defining properties, for example the school they attend, their id number, their year, their section and their seat number.</p> <p>Now imagine that you are a programmer trying to describe a student using code... how could you go about writing code that expresses these properties discussed above? Keep in mind that a <code>class Person</code> with the properties name, age, sex, height and weight already exists.</p> <p>You might think of a few different things that can be done here:</p> <p>One option is to have a <code>person</code> object as a part of the <code>student</code> object, like so:</p> <pre><code>class Person:\n    def __init__(self, name, age, sex, height, weight):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.height = height\n        self.weight = weight\n\n    def display_information(self):\n        print(\"Name   :\", self.name)\n        print(\"Age    :\", self.age)\n        print(\"Sex    :\", self.sex)\n        print(\"Height :\", self.height)\n        print(\"Weight :\", self.weight)\n\nclass Student1:\n    def __init__(self, person, school, id_no, seat_no, year, section):\n        self.person = person\n        self.school = school\n        self.id_no = id_no\n        self.seat_no = seat_no\n        self.year = year\n        self.section = section\n\n    def display_information(self):\n        self.person.display_information()\n        print(\"School  :\", self.school)\n        print(\"ID      :\", self.id_no)\n        print(\"Seat    :\", self.seat_no)\n        print(\"Year    :\", self.year)\n        print(\"Section :\", self.section)\n        print()\n\n\nA = Student1(Person(\"John\", 15, \"male\", 160, 60), \"SUTD\", 1024, 32, 2, \"A\")\n\nprint(A.person.name+\"'s age:\", A.person.age)\nA.display_information()\n</code></pre> <p>Another option might be to declare all of the properties of a <code>person</code> again along with the additional properties of a <code>student</code> <pre><code># class Person here is unused, basically making the already existing class redundant\nclass Person:\n    def __init__(self, name, age, sex, height, weight):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.height = height\n        self.weight = weight\n\n    def display_information(self):\n        print(\"Name   :\", self.name)\n        print(\"Age    :\", self.age)\n        print(\"Sex    :\", self.sex)\n        print(\"Height :\", self.height)\n        print(\"Weight :\", self.weight)\n\nclass Student2:\n    def __init__(self, name, age, sex, height, weight, school, id_no, seat_no, year, section):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.height = height\n        self.weight = weight\n        self.school = school\n        self.id_no = id_no\n        self.seat_no = seat_no\n        self.year = year\n        self.section = section\n\n    def display_information(self):\n        print(\"Name   :\", self.name)\n        print(\"Age    :\", self.age)\n        print(\"Sex    :\", self.sex)\n        print(\"Height :\", self.height)\n        print(\"Weight :\", self.weight)\n        print(\"School  :\", self.school)\n        print(\"ID      :\", self.id_no)\n        print(\"Seat    :\", self.seat_no)\n        print(\"Year    :\", self.year)\n        print(\"Section :\", self.section)\n        print()\n\n# when there are a lot of function parameters, it is nice to specify which parameters correspond to what\n# values for better readability and clarity and put them each on their own line\nB = Student2(\n    name = \"Robert\", \n    age = 14, \n    sex = \"male\", \n    height = 160, \n    weight = 65, \n    school = \"SUTD\", \n    id_no = 1025, \n    seat_no = 12, \n    year = 1, \n    section = \"A\",\n)\nprint(B.name+\"'s age:\", B.age)\nB.display_information()\n</code></pre> The first approach works, but the syntax looks a bit unintuitive, doesn't it?</p> <p>This is because to create a student object, you have to first make a Person object and then provide that person object to the student constructor, like so <code>A = Student1(Person(\"John\", 15, \"male\", 170, 70), \"SUTD\", 1024, 32, 2, \"A\")</code></p> <p>Also, to access a student's name and age, you have to do <code>A.person.name</code> and <code>A.person.age</code>... wouldn't <code>A.name</code> and <code>A.age</code> make more sense?</p> <p>The 2nd approach fixes this issue but it is also a bit tedious because you have to manually declare all properties of a person inside the student constructor... What if there were not 5, but 100 different properties associated with a person? It would be too unfeasable to manually rewrite them.</p> <p>This is where inheritance comes into the picture. Inheritance literally allows us to \"inherit\" the properties of one class (called the super or base class) into another class (called the sub or child class)</p> <pre><code># Super/Parent class\nclass Person:\n    def __init__(self, name, age, sex, height, weight):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.height = height\n        self.weight = weight\n\n    def display_information(self):\n        print(\"Name   :\", self.name)\n        print(\"Age    :\", self.age)\n        print(\"Sex    :\", self.sex)\n        print(\"Height :\", self.height)\n        print(\"Weight :\", self.weight)\n\n# Base/Sub class\nclass Student(Person):\n    def __init__(self, name, age, sex, height, weight, school, id_no, seat_no, year, section):\n        Person.__init__(self, name, age, sex, height, weight) # we can re-use functionality from the super class!\n        self.school = school\n        self.id_no = id_no\n        self.seat_no = seat_no\n        self.year = year\n        self.section = section\n\n    def display_information(self):\n        Person.display_information(self) # we can re-use functionality from the super class!\n        print(\"School  :\", self.school)\n        print(\"ID      :\", self.id_no)\n        print(\"Seat    :\", self.seat_no)\n        print(\"Year    :\", self.year)\n        print(\"Section :\", self.section)\n\n# when there are a lot of function parameters, it is nice to specify which parameters correspond to what\n# values for better readability and clarity and put them each on their own line\nA = Student(\n    name = \"Robin\", \n    age = 16, \n    sex = \"male\", \n    height = 180, \n    weight = 75, \n    school = \"SUTD\", \n    id_no = 1023, \n    seat_no = 3, \n    year = 3, \n    section = \"A\",\n)\nprint(A.name+\"'s age:\", A.age)\nA.display_information()\n</code></pre> <p>Best practice</p> <p>The following usages of super class methods in the above example: <pre><code>Person.__init__(self, name, age, sex, height, weight)\n\nPerson.display_information(self)\n</code></pre> Are for educational purposes only, in real python programs, we should make use of the following syntax instead:</p> <p><pre><code># notice that the self parameter has been omitted\nsuper().__init__(name, age, sex, height, weight)\n\nsuper().display_information()\n</code></pre> The reason for doing so is that <code>super()</code> in python does the work of figuring out which super class' function to call and if you end up changing the superclass, you don't have to change all your code everywhere (Also there can be multiple super classes, but that's a story for another day)</p> PractiseAnswer <p>Given a class computer, Write a subclass laptop and desktop with the given additional properties:</p> <p>A computer object has the following properties:</p> <ol> <li>CPU Type</li> <li>Storage Type</li> <li>Storage Quantity (in GB)</li> <li>RAM (in GB)</li> <li>GPU Type</li> </ol> <p>Write a class for laptop and desktop objects that have the above properties, and the additional properties listed below:</p> <p>Desktop:</p> <ol> <li>Monitor</li> <li>Monitor Resolution</li> <li>Keyboard</li> <li>Mouse</li> </ol> <p>Laptop:</p> <ol> <li>Monitor Resolution</li> <li>Is it a touchscreen?</li> </ol> <p>Also write a function that displays all this information</p> <pre><code>class Computer:\n    def __init__(\n        self,\n        cpu: str,\n        storage_type: str,\n        storage: float,\n        ram: float,\n        gpu: str,\n    ):\n\n        # type hints can also be given to a class' data members\n        self.cpu: str = cpu\n        self.storage_type: str = storage_type\n        self.storage: float = storage\n        self.ram: float = ram\n        self.gpu: str = gpu\n\n    def display_information(self):\n        print(\"The CPU type is     :\", self.cpu)\n        print(\"The Storage type is :\", self.storage_type)\n        print(\"The Stroage is      :\", self.storage)\n        print(\"The RAM is          :\", self.ram)\n        print(\"The GPU is          :\", self.gpu)\n</code></pre> <p>Given a class computer, Write a subclass laptop and desktop with the given additional properties:</p> <p>A computer object has the following properties:</p> <ol> <li>CPU Type</li> <li>Storage Type</li> <li>Storage Quantity (in GB)</li> <li>RAM (in GB)</li> <li>GPU Type</li> </ol> <p>Write a class for laptop and desktop objects that have the above properties, and the additional properties listed below:</p> <p>Desktop:</p> <ol> <li>Monitor</li> <li>Monitor Resolution</li> <li>Keyboard</li> <li>Mouse</li> </ol> <p>Laptop:</p> <ol> <li>Monitor Resolution</li> <li>Is it a touchscreen?</li> </ol> <p>Also write a function that displays all this information</p> <pre><code>class Computer:\n    def __init__(\n        self,\n        cpu: str,\n        storage_type: str,\n        storage: float,\n        ram: float,\n        gpu: str,\n    ):\n\n        # type hints can also be given to a class' data members\n        self.cpu: str = cpu\n        self.storage_type: str = storage_type\n        self.storage: float = storage\n        self.ram: float = ram\n        self.gpu: str = gpu\n\n    def display_information(self):\n        print(\"The CPU type is     :\", self.cpu)\n        print(\"The Storage type is :\", self.storage_type)\n        print(\"The Stroage is      :\", self.storage)\n        print(\"The RAM is          :\", self.ram)\n        print(\"The GPU is          :\", self.gpu)\n</code></pre> <p>Required Classes:</p> <pre><code>class Computer:\n    def __init__(\n        self,\n        cpu: str,\n        storage_type: str,\n        storage: float,\n        ram: float,\n        gpu: str,\n    ):\n\n        # type hints can also be given to a class' data members\n        self.cpu: str = cpu\n        self.storage_type: str = storage_type\n        self.storage: float = storage\n        self.ram: float = ram\n        self.gpu: str = gpu\n\n    def display_information(self):\n        print(\"The CPU type is     :\", self.cpu)\n        print(\"The Storage type is :\", self.storage_type)\n        print(\"The Stroage is      :\", self.storage)\n        print(\"The RAM is          :\", self.ram)\n        print(\"The GPU is          :\", self.gpu)\n\nclass Laptop(Computer):\n    def __init__(\n        self,\n        cpu: str,\n        storage_type: str,\n        storage: float,\n        ram: float,\n        gpu: str,\n        resolution: str,\n        is_touchscreen: bool,\n    ):\n        super().__init__(cpu, storage_type, storage, ram, gpu)\n        self.resolution = resolution\n        self.is_touchscreen = is_touchscreen\n\n    def display_information(self):\n        super().display_information()\n        print(\"The resolution is   :\", self.resolution)\n        print(\"Is it a touchscreen :\", self.is_touchscreen)\n\nclass Desktop(Computer):\n    def __init__(\n        self,\n        cpu: str,\n        storage_type: str,\n        storage: float,\n        ram: float,\n        gpu: str,\n        monitor: str,\n        resolution: str,\n        keyboard: str,\n        mouse: str,\n    ):\n        super().__init__(cpu, storage_type, storage, ram, gpu)\n        self.monitor = monitor\n        self.resolution = resolution\n        self.keyboard = keyboard\n        self.mouse = mouse\n\n    def display_information(self):\n        super().display_information()\n        print(\"The monitor is      :\", self.monitor)\n        print(\"The resolution is   :\", self.resolution)\n        print(\"The keyboard is     :\", self.keyboard)\n        print(\"The mouse is        :\", self.mouse)\n</code></pre>"},{"location":"operations/","title":"Operators","text":"<p>Now that we know how to store and change the values of a variable, what can we actually do with them?</p>"},{"location":"operations/#1-arithmetic-operators","title":"1. Arithmetic Operators","text":"<p>The most obvious thing that we can do with numbers, is do arithmetic with them. Python supports the following arithmetic operations:</p> Operator Name Example <code>+</code> Addition <code>a+b</code> <code>-</code> Subtraction <code>a-b</code> <code>*</code> Multiplication <code>a*b</code> <code>/</code> Division <code>a/b</code> <code>//</code> Integer Division <code>a//b</code> <code>%</code> Modulo <code>a%b</code> <code>**</code> Exponentiation <code>a**b</code> <p>What is integer division?</p> <p>Integer division gives you the quotient of the division. For example: <code>17/6 = 2.833</code> but <code>17//6 = 2</code>. Modulo on the other hand, gives you the remainder of a division.</p>"},{"location":"operations/#2-relational-operators","title":"2. Relational Operators","text":"<p>Relational operations allow us to compare variables with one another. With these, you can find out if one variable is greater than another, if two variables are equal, and much more.</p> <p>If you have two numbers \\(\\color{yellow} \\text{A}\\) and \\(\\color{yellow}\\text{B}\\), and are asked \"\\(\\text{if} \\; \\color{yellow}\\text{A} \\; \\color{red} \\text{is greater than} \\; \\color{yellow}\\text{B} \\color{white}\\)?\" then you can have only two possible answers, it will either be yes or no. Similarly, if you are asked \"\\(\\text{if} \\; \\color{yellow}\\text{A} \\; \\color{red} \\text{is equal to} \\; \\color{yellow}\\text{B} \\color{white}\\)?\" then this question also has only two answers, yes or no.</p> <p>Whenever you use a relational operator, it is like asking one of these questions above. Then how does a computer answer a question like this? Do you remember the data type that can only store one of two different values?</p> <p>A <code>boolean</code> data type can either be <code>True</code> or <code>False</code>, it does exactly this! Thus, the answers to all relational operations give you boolean values.</p> Operator Name Example <code>&lt;</code> Less Than <code>a&lt;b</code> <code>&gt;</code> Greater Than <code>a&gt;b</code> <code>&lt;=</code> Less Than or Equal to <code>a&lt;=b</code> <code>&gt;=</code> Greater Than or Equal to <code>a&gt;=b</code> <code>==</code> Equal to <code>a==b</code> <code>!=</code> Not Equal to <code>a!=b</code> <ol> <li><code>a &lt; b</code> This checks if the number <code>a</code> is lesser than <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> <li><code>a &gt; b</code> This checks if the number <code>a</code> is greater than <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> <li><code>a &lt;= b</code> This checks if the number <code>a</code> is lesser than or equal to <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> <li><code>a &gt;= b</code> This checks if the number <code>a</code> is greater than or equal to <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> <li><code>a == b</code> This checks if the number <code>a</code> is equal to <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> <li><code>a != b</code> This checks if the number <code>a</code> is not equal to <code>b</code>. If it is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</li> </ol> <p>String comparisons</p> <p>These relational operators also work on <code>String</code> values, for example <code>a &lt; b</code> checks if <code>a</code> would alphabetically preceed <code>b</code>.</p> <p>For Example:</p> <pre><code># with numbers:\n a = 10\n b = 20.0\n c = 30\n\n# this would print True\nprint(\"a &lt; b is\", a &lt; b)\n\n# this would print False\nprint(\"b &gt; c is\", b &gt; c)\n\n# this would print True\nprint(\"(a+b) == b is\", (a+b) == b)\n\n# this would print True\nprint(\"(a+b) &gt;= c is\", (a+b) &gt;= c)\n\n# this would print True\nprint(\"b &lt;= c is\", b &lt;= c)\n\n\n# With Strings:\nstr1 = \"ball\"\nstr2 = \"apple\"\nstr3 = \"cat\"\nstr4 = \"cat\"\n\n# this would print False\n# this is because alphabetically, str1 does not come before str2\nprint(\"str1 &lt; str2 is\", str1 &lt; str2)\n\n# this would print False\n# this is because alphabetically, str2 comes before str3\nprint(\"str3 &gt; str2 is\", str3 &gt; str2)\n\n# this would print True\nprint(\"str3 == str4 is\", str3 == str4)\n\n# this would print True\nprint(\"str1 != str2 is\", str1 != str2)\n</code></pre>"},{"location":"operations/#3-boolean-operators","title":"3. Boolean Operators","text":"<p>If two or more things are required to do a task, we can say that \"this AND that are required to do the task\". For example:</p> <p>To write an email to someone, you must \"\\(\\color{yellow} \\text{have a computer} \\; \\color{red} \\text{and} \\; \\color{yellow} \\text{have active internet}\\)\" To paint something, you must \"\\(\\color{yellow} \\text{have a paper} \\; \\color{red} \\text{and} \\; \\color{yellow} \\text{have paint} \\; \\color{red} \\text{and} \\; \\color{yellow} \\text{have a paint brush}\\)\"</p> <p>Similarly, if only one, or more things are required to do a task we say that \"this OR that is needed to do the task\". For example:</p> <p>To play a video game, you need to \"\\(\\color{yellow} \\text{own a computer} \\; \\color{red} \\text{or} \\; \\color{yellow} \\text{own a gaming console}\\)\" Note that you can still play video games if you own both!</p> <p>To draw something you must \"\\(\\color{yellow} \\text{have a pencil} \\; \\color{red} \\text{or} \\; \\color{yellow} \\text{have a pen} \\; \\color{red} \\text{and} \\; \\color{yellow} \\text{have a paper}\\)\"</p> <p>Boolean operations allow us to ask these sorts of questions but with boolean values instead. For example, if you wanted to ask \"is A greater than B and C?\" then you require boolean operations.</p>"},{"location":"operations/#31-the-boolean-and","title":"3.1. The Boolean AND","text":"<p>Boolean AND: This is used to check if two or more boolean values are simultaneously <code>True</code>.</p> <p>Usage: <code>a and b</code> (Here, <code>a</code> and <code>b</code> are boolean variables)</p> <p>This checks if both <code>a</code> AND <code>b</code> are <code>True</code>. If they are, the expression evaluates to <code>True</code>, otherwise it evaluates to <code>False</code>.</p> <p>Every combination of inputs and outputs for <code>a and b</code> can be written in a table:</p> a b a and b False False False False True False True False False True True True <p>AND with more than two values</p> <p>AND is not limited to just two variables. Any number of variables may be AND-ed together. For Example: <code>a and b and c and d</code>. For this expression to evaluate to True, ALL of <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> must be True.</p> <p>Can you write a table for all possible combinations of inputs and output for this expression?</p>"},{"location":"operations/#32-the-boolean-or","title":"3.2. The Boolean OR","text":"<p>Boolean OR: This is used to check if one or more booleans are <code>True</code>.</p> <p>Usage: <code>a or b</code> (Here, <code>a</code> and <code>b</code> are boolean variables)</p> <p>This checks if either <code>a</code> or <code>b</code> is <code>True</code>. If one of them is, then the expression evaluates to <code>True</code>, else it evaluates to <code>False</code>.</p> <p>Every combination of inputs and outputs for <code>a or b</code> can be written in a table:</p> a b a || b False False False False True True True False True True True True <p>OR with more than two values</p> <p>OR is not limited to just two variables. Any number of variables may be OR-ed together. For Example: <code>a or b or c or d</code>. For this expression to evaluate to True, only one of <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> needs to be True.</p> <p>Can you write a table for all possible combinations of inputs and output for this expression?</p> <p>Combining ANDs and ORs</p> <p>ANDs and ORs can be used together in the same expression. For example:</p> <p><code>(a or b) and c</code>: for this expression to be <code>True</code>, either <code>a</code> or <code>b</code> and <code>c</code> must be <code>True</code>.</p> <p><code>a or (b and c)</code>: for this expression to be <code>True</code>, either <code>a</code> must be <code>True</code>or <code>b</code> and <code>c</code> must be <code>True</code> simultaneously.</p> <p>ANDs are always evaluated before ORs</p> <p>What does this expression mean? <code>a or b and c</code></p> <ol> <li>a or b... and c?</li> <li>a or... b and c?</li> </ol> <p>If no brackets are used when writing these expressions, the AND parts of an expression are evaluated first. Thus, the above expression means the second statement in English!</p> <p>In that example, it might be easy to remember but what if we have something more complicated? <code>a or b and c or d and e</code>. It's the same as <code>a or (b and c) or (d and e)</code>.</p> <p>To make it absolutely clear as to what you mean when writing a boolean expression, you should ALWAYS use brackets appropriately for clarity, even when it is not necessary to do so.</p> <p>For example: <pre><code>a = 10\nb = 20\nc = 30\n\n# this would print True on the screen\n# because both a &lt; b and c &gt; d are True\nprint((a &lt; b) and (c &gt; b))\n\n# this would print False on the screen\n# because c &lt; b is False\nprint((a &lt; b) and (c &lt; b))\n\n# this would print True on the screen\n# because a &lt; b is True\nprint((a &lt; b) or (c &lt; b))\n\n# this would print False on the screen\n# because neither a &gt; b nor  c &lt; b is True\nprint((a &gt; b) or (c &lt; b))\n</code></pre></p>"},{"location":"operations/#4-membership-operators","title":"4. Membership Operators","text":"<p>These are used to test if a certain sequence is present in an object. For example:</p> <pre><code>print(\"water\" in \"this is a waterbottle\")\nprint(\"water\" not in \"this is a waterbottle\")\nprint(\"spongebob\" in \"squarepants\")\nprint(\"spongebob\" not in \"squarepants\")\n\n# they also work on lists, tuples and dicts:\n\nprint(5 in [5, 3, 1, 2, 7])\nprint(11 not in [1, 2, 6, 7])\n\nprint(17 in (15, 12, 16, 19, 17))\nprint(16 not in (14, 17, 11, 21))\n\n# for dicts, it checks if a certain key is present in the dict\nprint(3.14 in {3.14: \"pi\"})\nprint(5 in {3.14: \"pi\"})\n</code></pre>"},{"location":"operations/#5-the-assignment-operation","title":"5. The Assignment Operation","text":"<p>When we use the <code>=</code> sign in programming, it is not a mathematical equality statement. It actually tells us that we are assigning a value to a variable. So when you see something like <code>a = a+1;</code>, this means that you are simply adding <code>1</code> to the value of <code>a</code>. you are assigning the value <code>a+1</code> to <code>a</code>. Once again, it is not a mathematical equality statement, it is an assignment.</p>"},{"location":"operations/#6-shorthand-assignment-operators","title":"6. Shorthand Assignment Operators","text":"<p>Shorthand assignment operators allow us to assign values to variables:</p> Operator Name Example Non Short Hand Equivalent <code>+=</code> Addition <code>a+=b</code> <code>a = a+b</code> <code>-=</code> Subtraction <code>a-=b</code> <code>a = a-b</code> <code>*=</code> Multiplication <code>a*=b</code> <code>a = a*b</code> <code>/=</code> Division <code>a/=b</code> <code>a = a/b</code> <code>//=</code> Integer Division <code>a//=b</code> <code>a = a//b</code> <code>%=</code> Modulo <code>a%=b</code> <code>a = a%b</code> <code>**=</code> Exponentiation <code>a**=b</code> <code>a = a**b</code> <p>Identity and Bitwise operators</p> <p>There are two more types of operators, Identity Operators and Bitwise Operators. They are out of the scope of today's session, but if you are curious, you can look them up!</p>"},{"location":"vars/","title":"Python Basics","text":""},{"location":"vars/#1-constants","title":"1. Constants","text":"<p>To do anything in a program, we need constants. Any value that remains the same throughout the execution of the program is known as a constant. Quite literally, it is a constant. For example, <code>10</code> is a constant. Every number is a constant.</p>"},{"location":"vars/#2-variables","title":"2. Variables","text":"<p>Variables are like boxes that are used to store constants. Variables are values that can change during the execution of the program! Think about it this way, if a variable is a box that stores a constant, that constant can be taken out and another one can be put in. Quite literally, it is a variable (it may change!). For example:</p> <pre><code># creating and storing a value in a variable\n# is known as variable initialisation\n\na = 10\nb = 20.5\nc = a+b\n\n# a, b and c are the names of the variables here.\n\n# to be able to see the value of a variable,\n# we need to print it to the screen\nprint(c)\n\n# you can change a variable simply by re-assigning another value to it:\nc = a-b\nprint(c)\n</code></pre> <p>You can also store sentences, words:</p> <pre><code>a = \"this is a string\"\nprint(a)\n</code></pre> <p>You can store lists as well:</p> <pre><code>ls = [1, 4.5, \"python is awesome!\"]\nprint(ls)\n</code></pre>"},{"location":"vars/#3-data-types","title":"3. Data Types","text":"<p>Remember, variables are like boxes/containers that are used to store constants. For every different kind of constant, a different type of contanier/box is required! Think about it this way, you cannot store water in a paper bag. you need a water bottle to store water. Similarly, in python, each different kind of constant must be stored in a different type of variable. The type of the variable is known as its data type. So how many kinds of boxes, or data types are there? The following are the most commonly used data types in python:</p>"},{"location":"vars/#31-integer-int","title":"3.1. Integer (<code>int</code> )","text":"<p>An <code>int</code> quantity may be negative, positive, or zero. It never has any fractional or decimal parts (for example, an integer never has <code>0.5</code>). Syntax: <code>a = 10</code> This declares a variable of type <code>int</code> called <code>a</code> with a value of <code>10</code></p>"},{"location":"vars/#32-floating-point-float","title":"3.2. Floating Point (<code>float</code>)","text":"<p>A <code>float</code> is a data type that can store values with fractional parts or decimals. For example <code>1.5</code> is a floating point value.</p> <p>Syntax: <code>a = 3.14159</code> This declares a variable of type <code>float</code> called <code>a</code> with a value of <code>3.14159</code></p>"},{"location":"vars/#33-boolean-bool","title":"3.3. Boolean (<code>bool</code>)","text":"<p>A <code>bool</code> is a data type, that can only store one of two different values, <code>True</code> or <code>False</code>. Any yes or no question is a boolean question in some sense, because there are only two answers, yes or no (true or false). Boolean variables are super important for conditions, which we will be looking at later.</p> <p>Syntax: <code>a = True</code> This declares a variable of type <code>bool</code> called <code>a</code> with a value of <code>True</code></p> <p>Info</p> <p>A value of <code>True</code> can also be indicated by <code>1</code> and a value of <code>False</code> can also be indicated by <code>0</code>.</p>"},{"location":"vars/#34-string-str","title":"3.4. String (<code>str</code>)","text":"<p>An <code>str</code> is a word, a phrase or a sentence. A string is always enclosed by double quotes.</p> <p>Syntax: <code>a = \"this is a string! yay\"</code> This declares a variable of type <code>str</code> called <code>a</code> with a value of <code>\"this is a string! yay\"</code>. You can also use single quotes for declaring strings: <code>a = 'this is a string! yay'</code></p> <p>String with multiple lines?</p> <p>You might be tempted to do something like this: <pre><code>a = \"this is\\na multiple line\\nstring\"\n# \\n is a special character that represents a new line or an \"enter\" press in a string\n</code></pre></p> <p>But there is a better way: <pre><code>a = \"\"\"this is\na multiple line\nstring\"\"\"\n\nprint(a)\n\nb = '''this is\nanother multiple line\nstring'''\n\nprint(b)\n</code></pre></p> <p>what if you want to obtain the letter in a particular position in a string?</p> <pre><code>a = \"python is awesome\"\nprint(a[0])\n# this will give you the first letter of the string\n# in any programming language in general,\n# when we number items, we always start at 0 and not 1\n\n\n# in python, you can actually use a negative index:\nprint(a[-1])\n# and this gives you the last character of a.\n</code></pre> <p>What if you want to obtain a particular part of the string?</p> <pre><code>b = \"this is known as slicing\"\nprint(b[4:8])\n# this will give you a string that starts from the\n# 5th character of b and ends at the 9th character.\n# Note that the 9th letter is not included in this new sliced string\n# result: \" is k\"\n\nprint(b[3:])\n# this will give you a string that starts from the 4th character of b\n# result: \"s is known as slicing\"\n\nprint(b[:5])\n# this will give you a string that ends at the 6th character of b.\n# Note that the 6th character is not included in this new sliced string\n# result: \"s is known as slicing\"\n\nprint(b[2:10:3])\n# this will give you a string that starts from the \n# 3rd character of b and ends at the 11th character.\n# Note Only the every 3rd character is selected, starting from the first.\n# result: \"iik\"\n\nprint(b[::-1])\n# this will give you a string that is the reverse of the original!\n# result: \"gnicils sa nwonk si siht\"\n\nprint(len(b))\n# gives you the length of the string\n</code></pre> <p>You can also join two or more strings togethere: <pre><code>a = \"this is \"\nb = \"known as string\"\nc = \" concatenation!\"\nprint(a+b+c)\n</code></pre></p> <p>What would happen if you tried to access a poition of the string that is greater than its length?</p> <pre><code>a = \"this is a string\"\nprint(a[20])\n# the string does not have a 21st character,\n# you will get an error if you try this!\n</code></pre>"},{"location":"vars/#35-list-list","title":"3.5. List (<code>list</code>)","text":"<p>A <code>list</code> is an ordered collection of different constants. Each member of a list is formally called an element of that list.</p> <p>Example:  <pre><code>a = [2, 3.4, \"this is a list\", True, [\"this list is inside the first one\", \":O\"]]\n</code></pre></p> <p>This declares a variable of type <code>list</code> called <code>a</code> with the following values:</p> Index Value 0 <code>2</code> 1 <code>3.4</code> 2 <code>\"this is a list\"</code> 3 <code>True</code> 4 <code>[\"this list is inside the first one\", \":O\"]</code> <p>Also, in general when initialising a list, if the list is too long to fit in one line, it is common to break it up over multiple lines to increase visibility, like so:</p> <pre><code>a = [\n        2,\n        3.4,\n        \"this is a list\",\n        True,\n        [\"this list is inside the first one\", \":O\"]\n    ]\n</code></pre> <p>To obtain an element from a list, the same syntax as a string is used: <pre><code>a = [1, 2, 3, 4, 5, 6, 7, 8, 9, [10, 20, 30]]\nprint(a[0])\n# this will give you the first element of the list\n\nprint(a[-1])\n# and this gives you the last element of this (this is a list in itself)\n\nprint(a[4:8])\n# slicing also works exactly like strings.\n# this will give you a list starting from the\n# 5th element all the way to the 9th element.\n\nprint(len(a))\n# this gives you the number of elements in a list.\n\n# you can change any element of the list like so:\na[2] = 55\n\n# change the 2nd element of the last element of the list\na[-1][1] = 22\n</code></pre></p> <p>you can combine lists as follows:</p> <pre><code>a = [1, 2]\nb = [3, 4]\nc = [5, 6]\n\nprint(a+b+c)\n</code></pre> <p>you can add an element to a list using the append function:</p> <pre><code>a = [1, 2]\na.append(3)\nprint(a)\n</code></pre> <p>you can extend a list using another list by using the extend function:</p> <pre><code>a = [1, 2]\nb = [3, 4]\na.extend(b)\nprint(a)\n</code></pre> <p>What would happen if you tried to access an element of the list whoes index is greater than the length?</p> <pre><code>a = \"this is a string\"\nprint(a[20])\n# the string does not have a 21st character,\n# you will get an error if you try this!\n</code></pre>"},{"location":"vars/#36-tuple-tuple","title":"3.6. Tuple (<code>tuple</code>)","text":"<p>A <code>tuple</code> is exactly like a list. The only difference is that once a tuple is initialised, its elements cannot be altered. Technically, we say that a tuple is immutable.</p> <p>Example: <pre><code>a = (2, 3.4, \"this is a tuple\", True, (\"this tuple is inside the first one\", \":O\"), [\"this is a list inside the tuple\", \"o.O\"])\n</code></pre></p> <p>Similar to a list, it is common to break up a long tuple over multiple lines:</p> <pre><code>a = (\n        2,\n        3.4,\n        \"this is a tuple\",\n        True,\n        (\"this tuple is inside the first one\", \":O\"),\n        [\"this is a list inside the tuple\", \"o.O\"]\n    )\n</code></pre> <p>This declares a variable of type <code>tuple</code> called <code>a</code> with the following values:</p> Index Value 0 <code>2</code> 1 <code>3.4</code> 2 <code>\"this is a tuple\"</code> 3 <code>True</code> 4 <code>(\"this tuple is inside the first one\", \":O\")</code> 5 <code>[\"this is a list inside the tuple\", \"o.O\"]</code> <p>To obtain an element from a tuple, the same syntax as a list/string is used:</p> <pre><code>a = (1, 2, (3, 4, 5), [1, 2, 3])\nprint(a[0])\n# this will give you the first element of the tuple\n\nprint(a[-1])\n# and this gives you the last element of this tuple\n\nprint(a[0:3])\n# slicing also works on tuples.\n# this will give you a tuple starting from the \n# first element all the way to the 3rd element.\n\n# note that you cannot change the elements of a tuple.\n# trying to do that will get you an error\n\n# however, you CAN change a list inside a tuple.\na[-1][2] = 10\n</code></pre>"},{"location":"vars/#37-dictionary-dict","title":"3.7. Dictionary (<code>dict</code>)","text":"<p>A <code>dict</code> is a data type that can store \"key-value\" pairs. It essentially creates a map between specifed values.</p> <p>The constants to the left are called keys, and the constants to the right are called values.</p> <p>Example: <pre><code>a = {\n    \"this is a key\": \"this is it's value\",\n    3.14: \"pie\",\n    4: \"2x2\",\n    (2, 3): \"a tuple!\",\n}\n</code></pre></p> <p>Best Practice</p> <p>like a list or a tuple, you could write the above out in one line:</p> <pre><code>a = {\"this is a key\": \"this is it's value\", 3.14: \"pie\", 4: \"2x2\", (2, 3): \"a tuple!\"}\n</code></pre> <p>But that is so much worse for readability! Dicts are conventionally almost always never written like that, its always a good idea to write each key-value pair of a dict out on a separate line</p> <p>So how do you actually use a dictionary?</p> <pre><code>a = {\n    \"this is a key\": \"this is it's value\",\n    3.14: \"pie\",\n    4: \"2x2\",\n    (2, 3): \"a tuple!\",\n}\nprint(a[\"this is a key\"])\nprint(a[3.14])\nprint(a[4])\nprint(a[(2, 3)])\n\n# Similar to a list or tuple, you will get an\n# error from python if you try to access a key\n# that is not present in a dictionary\n\n# you can also use the get function to get values:\nprint(a.get(3.14))\n\n# you can actually specify a default value when using get\n# this is, in case the key is not in the dictionary,\n# then use the default value instead!\n\nprint(a.get(22, \"not found\"))\n</code></pre> <pre><code>a = \"this is a string\"\nprint(type(a))\n\na = 2.2\nprint(type(a))\n\na = [1, 2]\nprint(type(a))\n\na = 2\nprint(type(a))\n\na = (4, 5)\nprint(type(a))\n\na = True\nprint(type(a))\n</code></pre> <p>Remember that your variable names can be almost anything! However, this does not mean that you should just use single letters or alphabets for variable names. Variable names should be chosen such that they represent, or hint to what the purpose of the variable is. Naming your variables such that they make intuitive sense is a good programming practise.</p>"},{"location":"vars/#4-variable-naming-rules-and-conventions","title":"4. Variable Naming Rules and Conventions:","text":"<p>There are some rules that must be followed when naming a variable. They are:</p> <ol> <li> <p>You can only use letters, numbers and underscores to name your variables.</p> </li> <li> <p>A variable name cannot start with a number.</p> </li> <li> <p>Variable names are <code>CaSe SeNsItIvE</code>. This means that <code>a</code> and <code>A</code> are two different variable names!</p> </li> <li> <p>Variable names must not be keywords. A keyword is a reserved word in any programming language that has a special meaning! For example, <code>int</code> is a keyword in Python because it is the name of a data type.</p> </li> </ol> <p>While these are the only laws that you absolutely must follow, there are some conventions or unwritten rules that all programmers agree to follow to make their code more readable, and more clear.</p> <ol> <li> <p>When you are writing a variable name that is just one word, it is conventional to write it in all small letters. For example <code>radius = 10</code> or <code>name = \"John Cena\"</code>.</p> </li> <li> <p>When you are writing a variable name that consists of more than one word, then it is conventional to write it in a special case known as \"snake case\". Snake case is where the every word is written in small letters separated by underscores. For Example: <code>gear_ratio = 2.2</code> or <code>first_name = \"Bruce\"</code> or <code>last_name = \"Wayne\"</code>.</p> </li> <li> <p>When you are writing a variable that is supposed to just store the value of a constant, one which you never intend to change, it is conventional to use capital letters and words are separated by underscores. For example: <code>PI = 3.14159</code> or <code>GOLDEN_RATIO = 1.61803</code>.</p> </li> <li> <p>Variable names should be precise and mnemonic. That is, they should indicate to a casual programmer their purpose. Usage of single letter variable names is discouraged unless it is a throwaway or temporary variable.</p> </li> </ol>"}]}